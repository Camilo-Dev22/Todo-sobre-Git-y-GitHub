para crear una carpeta se usa comando mkdir <nombre de la carpeta> ej: mkdir practicas
para movernos a esa carpeta usamos cd <nombre de la carpeta>
dentro de la carpeta creamos archivos con touch ejemplo: touch ensayo.txt
Nota* si qeremos borrar un directorio usamos rm -r <nombre del directorio> para borrar archivos usamos rm <nombre del archivo>, para forzar la borrada de
un archivo se usa rm -rf <nombre del archivo>. es importante tener cuidado con el comando rm porque puede borrar hasta el disco duro. 

Despues, para activar git usamos el comando git init y se inicia en una carpeta oculta.

Después se escribe en VS Code. Se abre el archivo desde la terminal con el comando code ensayo.txt

A continuación, se escribe los datos o lo que sea que estará dentro del archivo .txt

Para  saber el estado de nuestros documentos en git usamos git status, y nos muestra que debemos añadir.

Para añadir el archivo que creamos, usamos git add . (este es para ñadir todos los archivos).
Después para dejar el mensaje-commit, utilizamos el comando git commit -m "el mensaje a dejar".
Recordar que los mensajes siempre van dentro de comillas. 

Para guardar los cambios en VS Code usamos Control + S, para crear un nuevo archivo control + N y contro + O para elegir un archivo que tengamos. 

Continuando con git, si queremos hacer comparación de cambios entre una versión antigua y otra reciente, 
usamos el comando git diff commit A commit B. Para tener el ID de los commit, para esto, primero usamos el comando git log, 
luego copiamos con click derecho los Id que queramos comparar (se recomienda poner el más viejo primero para que la comparacón sea más intuitiva).
Por otro lado, si queremos hacer comparación de las dos ultimas versiones, usamos comando git show. 

con git log el archivo que tenga (HEAD -> master) significa que es la ultima versión

Esto hace parte de la clase 12 de platzi. Para crear un nuevo archivo le ponemos al guardarlo .html y la terminal reconoce la cabecera. 
también para cambios esteticos, se reconoce .css 

en html se para abrir html, luego head aquí se pone el titulo, luego body, dentro de este se pone h1 que es el priemr titulo, 
y <p> que seria para el segundo texto. 
A continuación se crea un archivo .css. ejemplo estilos.css. aqui se usa como abridor {} y ya solo ponemos dnetro cosas como:
color, typography, entre otros. 

esto de html y css, es solo para el ejemplo, porque git también muestra los cambios que se hacen en html y en la forma de web que tiene, algo muy sorpendente e intuitivo,
  porque git también muestra con git status las nuevos archivos que creamos y que no han sido añadidos. 

Ya vamos a ver como "volver en el tiempo", pero antes, para borrar un archivo y regresarlo a la primera versión o la versión que queramos que regrese, 
usamos el comando gir reset <el ID del commit> --hard o soft. Con hard se borra todo en lo que hemos trabajado hasta el luar que decidimos regresar, 
Soft es un poco más delicado, porque deja cosas en el staging (memoria ram). 
los git reset --hard se pueden revertir pero solo si tienes el id del commit, por eso es importante hacer git log,
y guardar esos commit, por si queremos regresar a una versión que ya no aparece. 

Ahora si vamos a volver en el tiempo, para esto usamos el comando: git checkout <commit al que queremos regresar> archivo.
Ej: git checkout 4529617194ea96d42c48c1503d07dde2f1b12983 practicando.txt 
Tambien, si queremos regresar al archivo más reciente, usamos: git checkout maste archivo
Ej: git checkout master practicando.txt

Digamos que escogimos el primer-más viejo commit del archivo, le hacemos cambios y damos gitt add . este archivo pasa a ser el master o el más reciente, 
y todos los cambios anteriores, no se daparecen, sino, que quedan atras de este commit, si queremos volver al archivo que estaba más desarrollado o anterior,
usamos git checkout <el commit al que queremos que sea master> archivo. Y ya, solo debemos hacerle  cambios, guardarlo y añadirlo, 
y es como si nada hubiera pasado, pero, quedamos con el commit o con una versión diferente con la que habiamos empezado el proyecto,  
y para volver a ella solo usamos el commit nuevo que conseguimos con git checkout.  También sirve por si solo queremos mirar cambios anteriores,
por si tenemos algun error en el nuevo, solo miramos con el ID al que queremos y volvemos con el master. es muy funcional. 

el comando git reset commit --soft, es para eliminar el historial y los registros e git, pero quedan cambios en el staging que se le pueden aplicar a un nuevo commit.
el comando git reset commit --hard, elimina todo, hay que tener cuidado. elimina histotial, staging  la información de los commit  ponemos el commit al que queremos que se restaure y borra todo lo demás. 

el comando git rm <archivo> elimina el archivo de nuestro disco-carpeta, pero deja el historial en git, por lo que podemos abrirlo en VS Code y hacerle cambios, e inclusive volver a gaurdarlo en la carpeta de donde lo borramos.

con el comando git rm <archivo> --cached, elimina el archivo txt, html, etc de git, pero no de nuestro pc-escritotio. Esto es por si no vamos a trabajr más con ese archivo, 
ni le haremos más cambios o más commits. Si lo queremos añadir de nuevo es solo dar git add .

con git rm <archivo> force, lo borra del escritorio y de git, aunque deja el historial en commit en git. 
Con el comando git reset HEAD, podemos borrar los cambios que hicimos en VS Code y que ya están en git y no queremos que se vayan en el commit, 
para esto, usamos el comando antes o después del comando git add . pero no depués del commit, porque ya no se podra eliminar. esto solo elimina lo que está en staging-preparación.

Los nuevos comandos que son muy cool, es: git branch <nombre de la rama>, con este comando creamos una nueva rama, 
a simple vista no se ve la rama, si usamos git show, se muestra las ramas y hacia a donde apunta HEAD, que HEAD es la guia, para saber en que rama estamos ubicados y trabajando. 

para movernos entre ramas, usamos git checkout <nombre de la rama>. 
la rama se crea a partir de el ultimo commit, pero los cambios que se le hagan no se reflejan en la rama master. 
Si queremos hacer la creación de una rama y movernos a ella (combinar los dos comanos anteriores), solo usamos git checkout -b <nombre de la rama>
Este muy atento de en que rama está trabajando para no cometer errores.
Es importante guardar los cambios antes de movernos a la otra ram, porque o sino se borraran.

para juntar las dos ramas se utiliza git merge <nombre de la rama> se recomienda que estemos en la rama master para que la nueva linea continue por ahí,
aunque, despues de hacer los cambios los podemos traer a la rama secundaria con el mismo comando git merge, solo que nos ubicamos, 
en la rama secundaria, ej: git merge master , ya esos traeria los cambios de master a a la rama nueva

si tenemos algún conflicto en el momento del merge, debemos elegir uno de los dos cambios para que suceda el merge, 
estos conflictos se puedne visualizar en VS Code o en tu visualizador de codigo. 
Despues de la fusión, es importante hacer el add y el commit. Ej: git commit -am "Resolví el problema de la fusón de ramas"

Otros comandos que nos servirán. Git branch, nos sirve para saber el nombre de las ramas que tenemos. 
El comando git merge -d <nombre rama> es para eliminar una rama que ya no usaremos, o que consideramos eliminar, si no queremos eliminarla, no hace falta hacerlo. 

Si suceden conflictos, busquemos soluciones y no nos asustemos.

Para empezar a trabajar en github, tenemos que crear un nuevo repositorio, ponerle nombre y una descripción, elegimos si lo dejamos privado o público, 
y es recomendable señalar ADD a README file, esto es para que otros nos lean. 

-ahora lo que hay que es hacer es que debemos conectar el rempositorio local con el remoto. 
  Para la primera vez (por cada proyecto nuevo que iniciemos), se utiliza git remote add origin <http de la SSH>.  esto es para conectar los repositorios. 
Con git remote -v confirmamos la existencia del push y el fetch. 

Para fusionar los repositorios por primera vez y enviar lo que tiene el local y traer los que tiene el remoto, 
usamos primero comando: git push origin main y después comando:git pull origin main. Con esto ya quedan sincronizados. 
Después ya si se envia todo lo que tiene el repositorio local y los cambios que se hagan en el futuro con comando: git push origin main. 
Y los mismo, para traer los cambios que hagamos en el repositorio remoto (GitHub) comando: git pull origin main

Nota* es buena practica antes de mandar al repositorio remoto, traer los cambios que están allá, luego si hicimos cambios en el local poner el commit y ya si enviarlos al remoto.
Nota* En caso de que el repositotio local se niegue a fusionarse con el remoto, utiliza comand: git pull origin main --allow-unrelated-histories

Y si ya estás en github editando el archivo, recuerda dejar el commit después de los cambios, solo presiona en la parte que dice "Commit change".

Nota* Recuerda que estando en GitHub puede ver quien hizo cambios, hace cuanto, el historial (blame, 24 commit)

Nota* para crear un alias se usa: alias <el alias que usaremos> "el comando"

                  iMPORTANTE: para ver para metros de configuración: config -l, para hacer cambios en el correo: git config --global user.email "email"

Hablaremos sobre los tags, sirven para dejar un mensaje de la versión de un archivo para que el equipo este enterad. Para crearlos hay que seguir una serie de pasos. 
1- Con comando: git log --all --graph --decorate --oneline se muestran las historias de todos los commits y las dirreciones que ha tomado las ramas, de manera compacta, de aqui sale el HASH o el número compato para hacer el tag, 
Inclusive hay otro camando que nos muestra lo mismo pero de una forma más extensa: git log --all -graph.
2-Para crear un tag:  git tag -a <nombre tag > -m "mensaje" Hash, se recomienda porner el nombre del tag como v1.0 v2.0 etc. 
3-Con git tag revisamos la lista de tags que tenemos o que creamos. y para ver que el tag quedara miramos con: git tag --all --graph. 
4-para enviar un tag al repositorio usamos git push origin --tags
5-para elminar un tag de git usamos git delete -d <nombre del tag>
6- git push origin :refs/tags/nombretag, esto es para eliminar el tag de github 

Generalmente el trabajo en GitHub cuando trabajamos en grupo se divide en la parte de arriba y la de abajo. Lo de arriba sería la ram header y lo de abajo seria la rama footer. 
Con comando : git show-branch --all vemos todas las ramas que existen y su historia, con el comando: gitk, vemos lo mismo, soloque en una interfaz más gráfica
-Para enviar las ramas al repistorio local, usamos git push origin <nombre rama>
-Para eliminar la rama del repositorio de GitHub, usamos comando: git push origin --delete
Así se crean ramas de trabajo independiente que luego se juntarán con el merge. En ocasiones hay ramas que solo dejeamos en nustro repositorio remoto. 

Generalmente, cualquier persona puede descargar el trabajo que tengo como público en GitHub, sin embargo, el hecho de que lo descargue, no quiere decir que pueda editar. 
Para editar, debemos invitarlo a colabrorar. Para esto nos ubicamos en la pagina principal del repositorio de GitHub, 
Agí, buscamos settings, y en la parte lateral dar clic en Manage Acces, y clic en invitar colaborador. se teclea el nombre o correo de la persona que invitaré y le doy enviar invitación o añadir al repositorio. 
-La persona recibira un correo y apenas lo acepte podra editar. 
-Para que la persona que colabora, descargue el contenido, debe ir al repositorio que lo invito y dar en donde dice Code y copiar el HTTO o SSH en dado caso, 
y luego utilizar el en git comando: git clone <URL hhttp O SSH>, y ya tendremos los archivos descargados. 
Se recomienda guardar esto en una carpeta con nombre y demás. La persona que descarga, no tiene que empezar nada con git init, ni demás protocolos de inicio, 
pero si seguir lo demás de commit, revisar, push an pull, etc. 